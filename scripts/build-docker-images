#!/bin/bash
set -euo pipefail

SCRIPTPATH="$( cd "$(dirname "$0")" ; pwd -P )"

REPO_ROOT_PATH=$SCRIPTPATH/../
MAKE_FILE_PATH=$REPO_ROOT_PATH/Makefile
DOCKERFILE_PATH=$REPO_ROOT_PATH/Dockerfile

VERSION=$(make -s -f $MAKE_FILE_PATH version)
PLATFORMS=("linux/amd64")
GOPROXY="https://proxy.golang.org,direct"


USAGE=$(cat << 'EOM'
  Usage: build-docker-images  [-p <platform pairs>]
  Builds docker images for the platform pair

  Example: build-docker-images -p "linux/amd64,linux/arm"
          Optional:
            -p          Platform pair list (os/architecture) [DEFAULT: linux/amd64]
            -d          DIRECT: Set GOPROXY=direct to bypass go proxies
            -r          IMAGE REPO: set the docker image repo
            -v          VERSION: The application version of the docker image [DEFAULT: output of `make version`]
EOM
)

# Process our input arguments
while getopts "dp:r:v:" opt; do
  case ${opt} in
    p ) # Platform Pairs
        IFS=',' read -ra PLATFORMS <<< "$OPTARG"
      ;;
    d ) # GOPROXY=direct
        GOPROXY="direct"
      ;;
    r ) # Image Repo
        IMAGE_REPO="$OPTARG"
      ;;
    v ) # Image Version
        VERSION="$OPTARG"
      ;;
    \? )
        echo "$USAGE" 1>&2
        exit
      ;;
  esac
done

for os_arch in "${PLATFORMS[@]}"; do
    buildx_already_running=$(docker buildx ls | grep `docker buildx ls | grep "docker-container" | awk '{print $1}'` | grep "$os_arch" > /dev/null ; echo $?)
    if [[ buildx_already_running -ne 0 ]]; then
        echo "Starting docker buildx because a suitable one for $os_arch is not already running..."
        docker buildx create --use
    fi

    os=$(echo $os_arch | cut -d'/' -f1)
    arch=$(echo $os_arch | cut -d'/' -f2)

    img_tag="$IMAGE_REPO:$VERSION-$os-$arch"

    dockerfile="$DOCKERFILE_PATH"
    if [[ $os = "windows" ]]; then
        dockerfile="${dockerfile}.windows"
    fi

    docker buildx build \
        --load \
        --file "${dockerfile}" \
        --build-arg GOPROXY=${GOPROXY} \
        --tag ${img_tag} \
        --platform "${os_arch}" \
        ${REPO_ROOT_PATH}
done
